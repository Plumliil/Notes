import{_ as p,W as o,X as t,Y as a,Z as l,$ as s,a0 as c,a1 as n,C as r}from"./framework-1dfc2d2d.js";const i={},B=n(`<h1 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇" aria-hidden="true">#</a> 基础篇</h1><h2 id="什么是-vue" tabindex="-1"><a class="header-anchor" href="#什么是-vue" aria-hidden="true">#</a> 什么是 vue</h2><p>一套用于构建用户界面的前端框架</p><ul><li>构建用户界面：用 vue 往 html 中填充数据</li><li>框架：一套现成的解决方案，程序员只能遵守框架的规范，学习 vue 就是学习框架用法（指令，组件，路由，vuex）</li><li>只有把以上内容掌握，才有开发 vue 项目能力</li></ul><h2 id="vue-特性" tabindex="-1"><a class="header-anchor" href="#vue-特性" aria-hidden="true">#</a> vue 特性</h2><p>在 vue 页面中，vue 会监听数据变化，从而自动重新渲染页面结构</p><figure><img src="https://s2.loli.net/2023/03/29/mS67KG9XuJYvdCw.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>好处：数据变化时，页面重新渲染</p><p>坏处：数据驱动视图时双向绑定</p><h3 id="_1-提高开发效率-不再操作-dom-解放用户的双手" tabindex="-1"><a class="header-anchor" href="#_1-提高开发效率-不再操作-dom-解放用户的双手" aria-hidden="true">#</a> 1.提高开发效率，不再操作 dom，解放用户的双手</h3><h3 id="_2-框架和库的区别" tabindex="-1"><a class="header-anchor" href="#_2-框架和库的区别" aria-hidden="true">#</a> 2.框架和库的区别</h3><p>框架是一套完整的解决方案，对项目的侵入性比较大，更换框架=重写项目 库是提供某一个小功能，对项目的侵入性比较小，如果某个库无法完成某些需求，可以切换其他库</p><h3 id="_3-mvc-和-mvvm-之间的区别" tabindex="-1"><a class="header-anchor" href="#_3-mvc-和-mvvm-之间的区别" aria-hidden="true">#</a> 3.MVC 和 MVVM 之间的区别</h3><p>MVC 是后端开发概念，M 为 Model 层，V 是 View 层看作前端页面，C 相当于业务逻辑层</p><p>MVVM 是前端视图层的概念，主要把每个页面分成了 M，V 和 VM。其中 VM 是 MVVM 思想的核心，因为 VM 是 M 和 VM 之间的调度者，M 保存的是每个页面中单独的数据，V 就是每个页面中的 HTML 结构,每当 V 层想要获取和保存数据的时候，都要由 VM 做中间件处理 好处：前端页面使用 MVVM 的思想主要是为了方便开发，应为 MVVM 提供了数据的双向绑定（由 VM 提供）</p><h2 id="vue-指令" tabindex="-1"><a class="header-anchor" href="#vue-指令" aria-hidden="true">#</a> vue 指令</h2><h3 id="内置指令" tabindex="-1"><a class="header-anchor" href="#内置指令" aria-hidden="true">#</a> 内置指令</h3><h4 id="v-clock" tabindex="-1"><a class="header-anchor" href="#v-clock" aria-hidden="true">#</a> v-clock</h4><p>先通过样式隐藏内容,然后在内存中进行值得替换并显示最终结果 使用 v-clock 让用户看不到插值表达式闪烁，当 vue.js 在后边引用时</p><h4 id="v-text" tabindex="-1"><a class="header-anchor" href="#v-text" aria-hidden="true">#</a> v-text</h4><p>默认 v-text 没有闪烁问题，v-text 会覆盖元素中原始内容，但是插值表达式只会替换自己的占位符，不会把整个元素覆盖</p><h4 id="v-html" tabindex="-1"><a class="header-anchor" href="#v-html" aria-hidden="true">#</a> v-html</h4><p>可以直接渲染 html 标签</p><h4 id="v-pre" tabindex="-1"><a class="header-anchor" href="#v-pre" aria-hidden="true">#</a> v-pre</h4><p>填充原始信息,显示原始信息,跳过编译过程</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">&lt;!-- &lt;script src=&quot;./lib/vue.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">[</span><span style="color:#D19A66;">v-clock</span><span style="color:#C678DD;">]</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        display: </span><span style="color:#D19A66;">none</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-clock</span><span style="color:#ABB2BF;">&gt;{{msg}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">h4</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-text</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">h4</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-html</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;msg2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">vue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello Vue!&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">msg2</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;h3&gt;v-html&lt;/h3&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="v-bind" tabindex="-1"><a class="header-anchor" href="#v-bind" aria-hidden="true">#</a> v-bind</h4><p>提供绑定属性的一个指令</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-bind:title</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mytitle&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>v-bind 属性可以简洁为一个：要绑定的属性，且 v-bind 中可以写合法的表达式</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:title</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mytitle +&#39;123&#39;&#39; &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>mytitle:&#39;自定义 title&#39; 允许 v-bind 绑定属性值期间，如果绑定内容需要进行动态拼接，则字符串的外面应该包裹单引号如</p><p><code>&lt;P :title=&quot;&#39;box&#39;+index&quot;&gt;BOX&lt;/P&gt;</code></p><h4 id="v-on" tabindex="-1"><a class="header-anchor" href="#v-on" aria-hidden="true">#</a> v-on</h4><p>提供绑定事件的一个指令 v-on:=@</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:title</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mytitle&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Button&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on:click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;show&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">vue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">mytitle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;自定义title&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 在methods属性中定义了当前Vue实例所有可用的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;show&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件渲染指令" tabindex="-1"><a class="header-anchor" href="#条件渲染指令" aria-hidden="true">#</a> 条件渲染指令</h3><p>v-if：每次动态创建和移除元素创建删除节点,来实现（进入页面，某些元素默认不显示，后期可能也不显示才使用 v-if） v-show:动态为元素添加 display:none 样式来实现元素显示隐藏（频繁切换性能更好） 在实际开发中绝大多数勤快，不用考虑性能，直接 v-if v-else-if：必须配合 v-if 使用，实现多项判断 v-else：v-if 的相反情况</p><h3 id="列表渲染指令" tabindex="-1"><a class="header-anchor" href="#列表渲染指令" aria-hidden="true">#</a> 列表渲染指令</h3>`,39),d={href:"http://item.id",target:"_blank",rel:"noopener noreferrer"},y=n(`<ul><li>items 是待循环的数组</li><li>item 是被循环的每一项</li></ul><h2 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h2><p>放在事件后</p><ul><li>.stop:阻止事件向上冒泡</li><li>.prevent:阻止默认行为</li><li>.capture:事件捕获机制</li><li>.self:只有点击当前元素才会触发事件</li><li>.once:事件只执行一次</li></ul><h2 id="指令修饰符" tabindex="-1"><a class="header-anchor" href="#指令修饰符" aria-hidden="true">#</a> 指令修饰符</h2><h4 id="双向数据绑定" tabindex="-1"><a class="header-anchor" href="#双向数据绑定" aria-hidden="true">#</a> 双向数据绑定</h4><p>双向数据绑定用到了 v-model 这一指令</p><p>v-model 只能和特殊的元素搭配使用 input,textarea,select</p><p><code>&lt;input type=&quot;text&quot; value=&quot;&quot; v-model=&quot;msg&quot; @keyup.enter=&quot;enter&quot; /&gt;</code></p><p>为了方便对用户内容做处理，vue 为 vue-model 指令提供了 3 个修饰符，分别是：</p><table><thead><tr><th>修饰符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>.number</td><td>自动将用户的输入值转为数值类型</td><td><code>&lt;input v-model.number=&quot;age&quot; /&gt;</code></td></tr><tr><td>.trim</td><td>自动过滤用户输入的守卫空白字符</td><td><code>&lt;input v-model.trim=&quot;msg&quot; /&gt;</code></td></tr><tr><td>.lazy</td><td>在&quot;change&quot;时而非&quot;input&quot;时更新</td><td><code>&lt;input v-model.lazy=&quot;msg&quot; /&gt;</code></td></tr></tbody></table><h2 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符" aria-hidden="true">#</a> 按键修饰符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">@keyup.esc=&quot;clearInput&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">@keyup.enter=&quot;commitAjax&quot;&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">el:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#FFFFFF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">data:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;xxxxx&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">methods:{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#FFFFFF;">clearInput(e){</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#FFFFFF;">console.log(&#39;clearInput&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#FFFFFF;">e.target.value=null</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#FFFFFF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#FFFFFF;">commitAjax(){</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#FFFFFF;">console.log(&#39;commitAjax&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#FFFFFF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">})</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/script&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><p>过滤器是 vue 开发者提供的功能，常用于文本的格式化，过滤器可以和 v-bind 绑定 过滤器应该被添加在 javascript 表达式的尾部，由管道符进行调用，示例代码如下</p><h3 id="私有过滤器和全局过滤器" tabindex="-1"><a class="header-anchor" href="#私有过滤器和全局过滤器" aria-hidden="true">#</a> 私有过滤器和全局过滤器</h3><p>在 filters 节点下定义的过滤器，称为“私有过滤器”，因为它只能在当前 vm 示例所 控制的 el 区域内使用，如果希望在多个 vue 实例之间共享过滤器，则可可以按照如下格式定义全局过滤器</p><p><code>&lt;p&gt;message的值是：{{msg | capi}}&lt;/p&gt;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"> filters:{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 过滤器形参中的val永远是管道符|前的值</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">capi</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">// 字符串由charAt方法 这个方法接收一个索引值，表示从字符串中把索引对应的值</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">first</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">other</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">//过滤器钟一定要有一个返回值</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">other</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Vue.filter 方法接收两个参数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第一个参数是全局过滤器的名字</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第二个参数是全局过滤器的处理函数</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;capi&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过滤器的注意点" tabindex="-1"><a class="header-anchor" href="#过滤器的注意点" aria-hidden="true">#</a> 过滤器的注意点</h3><ul><li>要定义到 filters 节点下，本质是一个函数</li><li>在过滤器函数中，一定要有 return 值</li><li>在过滤器的形参中，就可以获取到管道符前面待处理的那个值</li><li>如果全局过滤器和私有过滤器名字一致，此时就按照就近原则，调用私有过滤器</li></ul><h3 id="过滤器格式化时间" tabindex="-1"><a class="header-anchor" href="#过滤器格式化时间" aria-hidden="true">#</a> 过滤器格式化时间</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dateFormat&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">dt</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">dayjs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;YYYY-MM-DD HH-mm-ss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">dt</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="串联的使用过滤器" tabindex="-1"><a class="header-anchor" href="#串联的使用过滤器" aria-hidden="true">#</a> 串联的使用过滤器</h3><p>过滤器可以串联调用 <code>&lt;P&gt;{message | filter1 | filter2 | filter3 }&lt;/p&gt;</code></p><h3 id="调用过滤器还可以传参" tabindex="-1"><a class="header-anchor" href="#调用过滤器还可以传参" aria-hidden="true">#</a> 调用过滤器还可以传参</h3><p>过滤器的本质是 javascript 函数，因此可以接受参数 <code>&lt;P&gt;{message | filter(arg1 , arg2) }&lt;/p&gt;</code> // 过滤器处理函数的形参列表中 // 第一个参数永远是管道符前待处理的参数 // 从第二个参数开始，才是调用过滤器时对传递过来的 arg1，arg2 参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;filter&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arg1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arg2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 过滤器代码逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过滤器的兼容性" tabindex="-1"><a class="header-anchor" href="#过滤器的兼容性" aria-hidden="true">#</a> 过滤器的兼容性</h3><p>vue3 不支持过滤器</p><h2 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器" aria-hidden="true">#</a> 监听器</h2><h4 id="什么是监听器" tabindex="-1"><a class="header-anchor" href="#什么是监听器" aria-hidden="true">#</a> 什么是监听器</h4><p>监听器允许开发者监视数据的变化，从而针对数据变化做特定动作 语法格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">watch:{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 监听器本质上是一个函数，要监视哪个数据的变化，就把数据名做方法名即可</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// newVal 变化后的新值 oldVal 变化后的旧值</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 新值在前 旧值在后</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">msg</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">oldVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;-----已更改为-----&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景：查询用户名是否重复，当旧值更改时就通过接口查询</p><h3 id="对象格式的监听器" tabindex="-1"><a class="header-anchor" href="#对象格式的监听器" aria-hidden="true">#</a> 对象格式的监听器</h3><p>// immediate 选项的默认值是 false // immediate 的作用是控制侦听器是否自动触发一次 immediate:true</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">watch:{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 对象格式的监听器</span></span>
<span class="line"><span style="color:#ABB2BF;">            msg:{</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">// 侦听器的处理函数</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">oldVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">oldVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                } ,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">// immediate 选项的默认值是 false</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">// immediate 的作用是控制侦听器是否自动触发一次</span></span>
<span class="line"><span style="color:#ABB2BF;">                immediate:</span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深度侦听" tabindex="-1"><a class="header-anchor" href="#深度侦听" aria-hidden="true">#</a> 深度侦听</h3><p>如果是对象属性发生变化无法触发监听器 可以通过 deep 选项深度监听属性变化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">watch:{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 对象格式的监听器</span></span>
<span class="line"><span style="color:#ABB2BF;">            info:{</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                },</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">// 开启深度监听，只要对象中任何一个属性变化，都会触发对象监听器</span></span>
<span class="line"><span style="color:#ABB2BF;">                deep:</span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">watch:{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 对象格式的监听器</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&#39;info.msg&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h2><p>指是通过一系列运算之后，最终得到的一个属性值 这个动态计算出来的属性值可以被模板结构或 methods 方法使用，示例代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/1999/html&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/1999/html&quot;</span></span>
<span class="line"><span style="color:#D19A66;">xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/1999/html&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Title&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../vue.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;https://cdn.bootcdn.net/ajax/libs/dayjs/1.4.1/dayjs.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">.box</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    width: </span><span style="color:#D19A66;">200</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    height: </span><span style="color:#D19A66;">200</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        r:&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;r&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">br</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        g:&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;g&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">br</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        b:&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">br</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{backgroundColor:rgb}&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        {{rgb}}</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;show&quot;</span><span style="color:#ABB2BF;">&gt;按钮&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">255</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rgb</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 监听属性</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">:{},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 计算属性</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 所有的计算属性都要定义到computed节点下</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 计算属性在定义的时候，要定义成方法格式</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// rgb作为一个计算属性被定义为方法格式</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 最终，在这个方法中，要返回一个生成好的rgb(x,x,x)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">rgb</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`rgb(</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">r</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">,</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">g</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">,</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">)\`</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>定义的时候要被定义为方法</li><li>在使用计算属性的时候，当普通的属性使用即可</li></ul><h3 id="好处" tabindex="-1"><a class="header-anchor" href="#好处" aria-hidden="true">#</a> 好处</h3><ul><li>实现了代码复用</li><li>只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值</li></ul><h2 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> axios</h2><h4 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">axios</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求类型&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求地址&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// .then用来指定请求成功后的回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 形参中的 result 是请求成功后的结果</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 axios 得到的返回值是一个 promise 对象 axios 在请求到数据后，在真正的数据外套了一层壳</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    config:{},</span></span>
<span class="line"><span style="color:#ABB2BF;">    data:{</span><span style="color:#98C379;">&#39;真实数据&#39;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    headers:{},</span></span>
<span class="line"><span style="color:#ABB2BF;">    request:{},</span></span>
<span class="line"><span style="color:#ABB2BF;">    status:</span><span style="color:#E06C75;">xxx</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    statusText:</span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><ul><li>发起 get 请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">axios</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;GET&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求地址&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// url中查询参数 (get)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// .then用来指定请求成功后的回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 形参中的 result 是请求成功后的结果</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>发起 post 请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">axios</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;POST&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求地址&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// url中查询参数 (get)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// .then用来指定请求成功后的回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 形参中的 result 是请求成功后的结果</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="await-async" tabindex="-1"><a class="header-anchor" href="#await-async" aria-hidden="true">#</a> await async</h3><p>通过 await 可以获取到返回值，而不是 promise 对象，但必须用在 async 修饰的方法中</p><h4 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a> 解构赋值</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">async getData(){ const {data:res}=await axios({ method:&#39;POST&#39;, url:&#39;xxxxxxx&#39;, //</span></span>
<span class="line"><span style="color:#ABB2BF;">请求体参数 (post) data:{} }) console.log(res) }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简化" tabindex="-1"><a class="header-anchor" href="#简化" aria-hidden="true">#</a> 简化</h3><p>访问方法</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">async getData(){ const {data:resPost}=await</span></span>
<span class="line"><span style="color:#ABB2BF;">axios.post(&#39;http://xxx.xxx.xxx&#39;,{name:&#39;xxx&#39;}) const {data:resGet}=await</span></span>
<span class="line"><span style="color:#ABB2BF;">axios.get(&#39;http://xxx.xxx.xxx&#39;,{params:{name:&#39;xxx&#39;}}) console.log(resPost)</span></span>
<span class="line"><span style="color:#ABB2BF;">console.log(resGet) }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-cli" tabindex="-1"><a class="header-anchor" href="#vue-cli" aria-hidden="true">#</a> vue-cli</h2><p>单页面程序（Single Page Application），简称 SPA,顾名思义，指的是一个 Web 网站只有唯一一个 HTML 界面， 所有的功能与交互都在这唯一的一个页面内完成。</p><h3 id="什么是-vue-cli" tabindex="-1"><a class="header-anchor" href="#什么是-vue-cli" aria-hidden="true">#</a> 什么是 vue-cli</h3><p>vue-cli 是 Vue.js 开发的标准工具。它简化了程序员基于 Webpack 创建工程化 Vue 项目的过程。 引用 vue-cli 官网上一句话，承轩 u 你可以专注于撰写应用，而不必花好几天纠结 webpack 配置</p><h3 id="安装和使用" tabindex="-1"><a class="header-anchor" href="#安装和使用" aria-hidden="true">#</a> 安装和使用</h3><p>vue-cli 是 npm 上一个全局包，使用 npm install 命令，即可方便的把它安装到电脑上 <code>npm install -g @vue/cli</code> 1.基于 vue-cli 快速生成工程化 Vue 项目 <code>vue create 项目名称</code> 2.vue 项目中 src 目录的构成</p><ul><li>assets 文件夹：存放项目中的静态资源文件</li><li>components 文件夹：程序员封装的可复用组件都要放到 components 目录下</li><li>main.js 入口文件：整个项目的执行都要先执行该入口文件</li><li>App.vue 项目的根组件：</li></ul><p>Vue 实例的$mount()方法，作用和 el 属性完全一样</p><h2 id="vue-组件" tabindex="-1"><a class="header-anchor" href="#vue-组件" aria-hidden="true">#</a> vue 组件</h2><p>组件化开发指的是：根据封装的思想，把页面上可重用的 UI 结构封装为组件，从而方便项目开发和维护</p><h3 id="vue-组件的三个部分" tabindex="-1"><a class="header-anchor" href="#vue-组件的三个部分" aria-hidden="true">#</a> vue 组件的三个部分</h3><ul><li>template 组件模板结构</li><li>script 组件的 javascript 行为</li><li>style 组件的 css 样式(默认 css 语法)加上 lang 可以改成其他语法</li><li><code>&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">@click=&quot;changeMsg&quot;&gt;按钮&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFFFFF;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 默认导出，固定语法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;font-style:italic;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// data 数据源</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 注意：vue组件中的data不能像之前一样，不能指向对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 注意：组件中的data必须是一个函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        return{</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">methods:{</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">changeMsg(e){</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">this.msg+=1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 在组件中 this就表示当前组建的实例对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#FFFFFF;">console.log(this)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#FFFFFF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">watch:{},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">computed:{},</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">filters:{}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">}</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFFFFF;">&lt;style&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">#app{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">background-color:</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">pink;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">}</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/style&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件之间的父子关系" tabindex="-1"><a class="header-anchor" href="#组件之间的父子关系" aria-hidden="true">#</a> 组件之间的父子关系</h3><p>组件在封装好之后是相互独立的，不存在父子关系 使用组建的三个步骤</p><ul><li>使用 import 语法导入需要的组件</li><li>使用 components 节点组测组件</li><li>以标签的形式使用刚才注册的组件</li></ul><h3 id="通过-components-注册的是私有组件" tabindex="-1"><a class="header-anchor" href="#通过-components-注册的是私有组件" aria-hidden="true">#</a> 通过 components 注册的是私有组件</h3><p>例如：在组件 A 的 components 节点下，注册了组件 F 则组件 F 只能用个在组件 A 中，不能用被用在组件 C 中 缺点：多次复用时很麻烦 实例代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入需要被全局注册的组件</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Count</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;@/components/Count&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;MyCount&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册全局组件" tabindex="-1"><a class="header-anchor" href="#注册全局组件" aria-hidden="true">#</a> 注册全局组件</h3><p>在 vue 项目的 main.js 文件中,通过 Vue.component()方法，可以注册全局组件，示例代码如下</p><h3 id="结合-v-bind-使用自定义属性" tabindex="-1"><a class="header-anchor" href="#结合-v-bind-使用自定义属性" aria-hidden="true">#</a> 结合 v-bind 使用自定义属性</h3><p>v-bind 内的值是 javascript 数字不加的话为普通字符串</p><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><p>props 是组件的自定义属性，在封装组件的时候，合理的使用 props 可以极大的提高组件的复用性 自定义属性名字是封装这自定义的（&#39;合法即可&#39;） 格式语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;init&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-里的数据是只读的" tabindex="-1"><a class="header-anchor" href="#props-里的数据是只读的" aria-hidden="true">#</a> props 里的数据是只读的</h4><p>程序员不能直接修改 props 里的值，负责终端会报错 可以把 props 里的值转存到 data 中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;init&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Count&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-默认值" tabindex="-1"><a class="header-anchor" href="#props-默认值" aria-hidden="true">#</a> props 默认值</h4><p>定义对象里的 props 实例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Count&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-里的-type-值类型" tabindex="-1"><a class="header-anchor" href="#props-里的-type-值类型" aria-hidden="true">#</a> props 里的 type 值类型</h4><p>type:</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object 示例代码：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Count&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-里的必填-required" tabindex="-1"><a class="header-anchor" href="#props-里的必填-required" aria-hidden="true">#</a> props 里的必填 required</h4><p>当 required 为 true，如果不传值就会报错，有默认值也没用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">export default { //</span></span>
<span class="line"><span style="color:#ABB2BF;">props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值 props: { init:</span></span>
<span class="line"><span style="color:#ABB2BF;">{ default: 0, type:Number, required:true } }, name: &quot;Count&quot;, data() { return {</span></span>
<span class="line"><span style="color:#ABB2BF;">count: this.init } } }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件之间的样式冲突问题" tabindex="-1"><a class="header-anchor" href="#组件之间的样式冲突问题" aria-hidden="true">#</a> 组件之间的样式冲突问题</h4><p>默认情况下，写在.vue 组件中的样式会全局生效，因此会造成多个组件之间的样式冲突问题。 导致组件之间样式冲突的根本原因是： ①：单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面呈现的 ②：每个组件中的样式，都会影响整个 index.html 页面中的 Dom 元素 如何解决：</p><ul><li>给当前组件内的标签中加入自定义属性 <code>data-v-xxx</code><code>h1[data-v-xxx]{xxx}</code></li><li>在 style 标签内加入 scoped 属性，防止组件间样式冲突</li><li>在父组件中更改子组件的样式 当使用第三方库时需要用到/deep/，更改子组件的子元素 <code>h1[data-v-xxx]{}</code>/deep/前 <code>[data-v-xxx]h1{}</code>/deep/后 <code>/deep/ h1{}</code></li></ul><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><h3 id="组件间的生命周期" tabindex="-1"><a class="header-anchor" href="#组件间的生命周期" aria-hidden="true">#</a> 组件间的生命周期</h3><p>生命周期是指一个组件从创建-&gt;运行-&gt;销毁的整个阶段，强调的是一个时间段 生命周期函数：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行</p>`,112),F=n(`<p>注意：生命周期强调的是时间段，生命周期函数强调的是时间点</p><h4 id="创建阶段生命周期函数" tabindex="-1"><a class="header-anchor" href="#创建阶段生命周期函数" aria-hidden="true">#</a> 创建阶段生命周期函数</h4><ul><li>beforeCreate(){} 组件的 props/data/methods 尚未被创建，都处于不可用状态</li><li>created(){} 组件的 props/data/methods 已创建好，处于可用状态，但是组建的模板结构尚未生成</li><li>beforeMount(){} 将要把内存中编译好的 HTML 结构渲染到浏览器中，此时浏览器中还没有当前组件的 DOM 结构</li><li>mounted(){} 已经把内存中的 HTML 结构，成功的渲染到浏览器中，此时浏览器中已然包含了当前组建的 DOM 结构</li></ul><h3 id="运行阶段生命周期函数" tabindex="-1"><a class="header-anchor" href="#运行阶段生命周期函数" aria-hidden="true">#</a> 运行阶段生命周期函数</h3><ul><li>beforeUpdate(){} 将要根据变化后，最新的数据，重新渲染组件的模板结构。（此时还未渲染）</li><li>updated(){} 已经根据最新的数据，完成了组件 DOM 结构的重新渲染，数据变化之后为了操作最新的数据，必须放在 updated 生命周期函数里</li></ul><h3 id="销毁阶段生命周期函数" tabindex="-1"><a class="header-anchor" href="#销毁阶段生命周期函数" aria-hidden="true">#</a> 销毁阶段生命周期函数</h3><ul><li>beforeDestroy(){} 将要销毁此组件，此时尚未销毁，组件还处于正常工作的状态</li><li>destroy(){} 组件已经被销毁，此组件在浏览器中对应的 DOM 结构已经被完全移除</li></ul><h2 id="数据共享" tabindex="-1"><a class="header-anchor" href="#数据共享" aria-hidden="true">#</a> 数据共享</h2><h3 id="父组件向子组件传递数据" tabindex="-1"><a class="header-anchor" href="#父组件向子组件传递数据" aria-hidden="true">#</a> 父组件向子组件传递数据</h3><p>父组件向子组件共享数据需要使用自定义属性 不能修改 props 里的值，只能转存</p><ul><li>父</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">Son</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">msg</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">user</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">userInfo</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">Son</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>子</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">class</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;son&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Son 组件&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;父组件传递过来的 msg 值为：</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;父组件传递过来的 user 值为：</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">export default </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">:[</span><span style="color:#98C379;">&#39;msg&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Son&quot;</span></span>
<span class="line"><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子组件向父组件传值" tabindex="-1"><a class="header-anchor" href="#子组件向父组件传值" aria-hidden="true">#</a> 子组件向父组件传值</h3><ul><li>子 <code>this.$emit(&#39;numChange&#39;,this.num)</code></li><li>父 <code>&lt;right @numChange=&quot;getNewNum&quot;&gt;&lt;/right&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">getNewNum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">numFromSon</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">val</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="兄弟组件之间的传值" tabindex="-1"><a class="header-anchor" href="#兄弟组件之间的传值" aria-hidden="true">#</a> 兄弟组件之间的传值</h3><p>在 vue2.x 中，兄弟组件之间数据共享的方案是 EventBus EventBus 的使用步骤</p><ul><li>创建 eventBus.js 模块，并向外共享一个 Vue 的实例对象</li><li>在数据发送方，调用 bus.$emit(&#39;时间名称&#39;,要发送的数据)方法触发自定义事件</li><li>在数据接收方，调用 bus.$on(&#39;事件名称&#39;,事件处理函数)方法注册一个自定义事件<!-- ![img_1.png](img_1.png) --></li></ul><h2 id="ref-引用" tabindex="-1"><a class="header-anchor" href="#ref-引用" aria-hidden="true">#</a> ref 引用</h2><h3 id="什么是-ref-引用" tabindex="-1"><a class="header-anchor" href="#什么是-ref-引用" aria-hidden="true">#</a> 什么是 ref 引用</h3><p>ref 用来辅助开发者在不依赖 jQuery 的情况下，获取 DOM 元素或组件的引用</p><h3 id="使用-ref-引用组件" tabindex="-1"><a class="header-anchor" href="#使用-ref-引用组件" aria-hidden="true">#</a> 使用 ref 引用组件</h3><p><code>&lt;Left ref=&quot;left&quot;&gt;&lt;/Left&gt;</code><code>console.log(this.$refs.left)</code></p><h3 id="this-nexttick-cb-方法" tabindex="-1"><a class="header-anchor" href="#this-nexttick-cb-方法" aria-hidden="true">#</a> this.$nextTick(cb)方法</h3><p>组件的$nextTick(cb)方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行。通俗的理解是： 等组件 DOM 更新完成之后，在执行 cb 回调函数，从而能保证 cb 回调函数可以操作到最新的 DOM 元素</p>`,27);function v(u,A){const e=r("ExternalLinkIcon");return o(),t("div",null,[a(` ---
prev: ../React
next: false
--- `),B,l("p",null,[s("vue 提供了 v-for 列表渲染指令，用来辅助开发者继续一个数组来循环渲染列表结构。v-for 指令需要用 item in items 形式语法中 key 属性绑定,官方建议只要用到 v-for 一定要绑定一个 key，key 值最好为 "),l("a",d,[s("item.id"),c(e)]),s("（提升性能，防止列表状态紊乱） 官方对 key 值的类型是有要求的，字符串或数字类型 key 的值是千万不能重复的，否则终端会报错：Duplicate keys detected")]),y,a(" ![img.png](img.png) "),F])}const b=p(i,[["render",v],["__file","basics.html.vue"]]);export{b as default};
