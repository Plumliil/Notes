import{_ as s,W as a,X as e,a1 as n}from"./framework-b3a1bbcf.js";const l={},o=n(`<h1 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇" aria-hidden="true">#</a> 基础篇</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><h4 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像" aria-hidden="true">#</a> 镜像</h4><p>镜像是一个只读的模板,可以用来创建容器</p><h4 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h4><p>容器是docker的运行实例,提供了一个独立的可移植的环境,可以在环境中运行应用程序</p><p>镜像和容器的关系像是类和实例的关系</p><p>镜像是类</p><p>容器是实例</p><h5 id="容器化和dockerfile" tabindex="-1"><a class="header-anchor" href="#容器化和dockerfile" aria-hidden="true">#</a> 容器化和Dockerfile</h5><p>Dockerfile是一个文本文件,里边包含了一条条指令来告诉docker如何来构建镜像,镜像中包含了应用程序执行的所有命令(各种依赖,配置环境等等)</p><p>一般情况下在目录根文件下创建该文本文件</p><ul><li>创建一个Dockerfile 来告诉docke构建应用程序镜像所需要的步骤和配置</li><li>使用Dockerfile构建镜像</li><li>使用镜像创建和运行容器</li></ul><h4 id="仓库" tabindex="-1"><a class="header-anchor" href="#仓库" aria-hidden="true">#</a> 仓库</h4><p>docker仓库用于存放docker镜像</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><p>在hellodocker文件夹下创建一个简单的js文件index.js,并创建配置文件Dockerfile</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello docker&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#ABB2BF;"> node:14-alpine</span></span>
<span class="line"><span style="color:#61AFEF;">COPY</span><span style="color:#ABB2BF;"> index.js /index.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># CMD [ &quot;node&quot;,&#39;/index.js&#39; ]</span></span>
<span class="line"><span style="color:#61AFEF;">CMD</span><span style="color:#ABB2BF;"> node /index.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 提交容器 docker ps -a 显示容器信息</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">commit</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{容器ID号}{dockerhub用户名}/{仓库名}:{tag}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 推送镜像到远程dockerhub仓库</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{dockerhub用户名}/{仓库名}:{tag}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 拉取镜像</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">pull</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{dockerhub用户名}/{仓库名}:{tag}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像" aria-hidden="true">#</a> 构建镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-t</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">image-nam</span><span style="color:#ABB2BF;">e&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">ta</span><span style="color:#ABB2BF;">g&gt; </span><span style="color:#D19A66;">-f</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">Dockerfile-pat</span><span style="color:#ABB2BF;">h&gt; &lt;</span><span style="color:#98C379;">context-pat</span><span style="color:#ABB2BF;">h&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>docker build</code>: 这是构建Docker镜像的命</li><li><code>-t &lt;image-name&gt;:&lt;tag&gt;</code>: 指定构建后的镜像名称和标签。其中，<code>&lt;image-name&gt;</code>是您为镜像起的名称，<code>&lt;tag&gt;</code>是镜像的标签（如版本号），通常为latest或具体的版本号（如1.0.0）。如果省略标签，默认为latest。例如：-t my-app:latest。</li><li><code>-f &lt;Dockerfile-path&gt;</code>: （可选）指定Dockerfile的路径。如果Dockerfile位于当前目录下且名为&quot;Dockerfile&quot;，则可以省略此选项。否则，请提供Dockerfile的完整路径，如-f <code>/path/to/Dockerfile</code>。</li><li><code>&lt;context-path&gt;</code>: （可选）指定构建上下文的路径，即Docker将发送到守护进程进行构建的目录路径。守护进程会将该路径下的所有内容（包括子目录）打包成tar文件发送到服务器端。默认情况下，上下文路径是执行<code>docker build</code>命令时所在的目录。例如：.表示当前目录，<code>/path/to/context</code>表示指定的目录。</li></ul><h3 id="对镜像tag标记并容器转镜像" tabindex="-1"><a class="header-anchor" href="#对镜像tag标记并容器转镜像" aria-hidden="true">#</a> 对镜像tag标记并容器转镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">SOURCE_IMAGE[:TAG]</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">TARGET_IMAGE[:TAG]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>SOURCE_IMAGE[:TAG]：源镜像的名称和标签。如果不指定标签，默认为latest。</li><li>TARGET_IMAGE[:TAG]：目标镜像的名称和标签，可以是本地或远程仓库的镜像。</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">myapp:latest</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">myapp:v1.</span><span style="color:#D19A66;">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">myapp:v1.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">registry.example.com/myapp:v1.</span><span style="color:#D19A66;">0</span><span style="color:#98C379;">-production</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">registry.example.com/myapp:v1.</span><span style="color:#D19A66;">0</span><span style="color:#98C379;">-production</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在运行的容器中执行命令-docker-exec" tabindex="-1"><a class="header-anchor" href="#在运行的容器中执行命令-docker-exec" aria-hidden="true">#</a> 在运行的容器中执行命令 docker exec</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">exec</span><span style="color:#ABB2BF;"> [OPTIONS] </span><span style="color:#98C379;">CONTAINER</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">COMMAND</span><span style="color:#ABB2BF;"> [ARG...]</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">exec</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-it</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{容器ID号}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>OPTIONS说明：</p><ul><li>-d :分离模式: 在后台运行</li><li>-i :即使没有附加也保持STDIN 打开</li><li>-t :分配一个伪终端 实例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">exec</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-it</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">nginx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/bin/bash</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># 进入容器的虚拟终端 /bin/sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,40),c=[o];function r(p,i){return a(),e("div",null,c)}const t=s(l,[["render",r],["__file","basics.html.vue"]]);export{t as default};
